import configparser


# CONFIG
config = configparser.ConfigParser()
config.read('dwh.cfg')

# DROP TABLES

staging_events_table_drop = "DROP TABLE IF EXISTS staging_events;"
staging_songs_table_drop = "DROP TABLE IF EXISTS staging_songs;"
songplay_table_drop = "DROP TABLE IF EXISTS songplays;"
user_table_drop = "DROP TABLE IF EXISTS users;"
song_table_drop = "DROP TABLE IF EXISTS songs;"
artist_table_drop = "DROP TABLE IF EXISTS artists;"
time_table_drop = "DROP TABLE IF EXISTS time;"

# CREATE TABLES

"""app activity logs from an imaginary music streaming app based on configuration settings"""
staging_events_table_create=("""
CREATE TABLE staging_events (
    artist varchar(255),
    auth varchar(25),
    firstName varchar(255),
    gender char,
    itemInSession int,
    lastName varchar(255),
    length numeric(21,7),
    level varchar(25),
    location varchar(255),
    method varchar(25),
    page varchar(255),
    registration numeric(15,0),
    sessionId int,
    song varchar(255),
    status int,
    ts double precision,
    userAgent varchar(255),
    userId int
);
""")

"""metadata about a song and the artist of that song"""
staging_songs_table_create=("""
CREATE TABLE staging_songs (
    song_id varchar(255),
    num_songs integer,
    title varchar(255),
    artist_name varchar(255),
    artist_latitude float,
    artist_longitude float,
    year int,
    duration float,
    artist_id varchar(255),
    artist_location varchar(255)
);
""")

"""records in event data associated with song plays i.e. records with page NextSong"""
songplay_table_create = ("""
CREATE TABLE songplays (
    songplay_id bigint identity(0, 1) PRIMARY KEY,
    start_time timestamp not null,
    user_id integer not null,
    level varchar(25),
    song_id varchar(255) not null,
    artist_id varchar(255) not null,
    duration decimal(10,4),
    sessionId int,
    location varchar(255),
    userAgent varchar(255),
    FOREIGN KEY(user_id) REFERENCES users(user_id),
    FOREIGN KEY(song_id) REFERENCES songs(song_id),
    FOREIGN KEY(artist_id) REFERENCES artists(artist_id),
    FOREIGN KEY(start_time) REFERENCES time(start_time)
);
""")

"""users in the app"""
user_table_create = ("""
CREATE TABLE users (
    user_id integer PRIMARY KEY,
    first_name varchar(255),
    last_name varchar(255),
    gender char,
    level varchar(25)
);
""")

"""songs in music database"""
song_table_create = ("""
CREATE TABLE songs (
    song_id varchar(255) PRIMARY KEY,
    artist_name varchar(255),
    title varchar(255),
    year int,
    duration decimal(10,4),
    artist_id varchar(255) not null,
    FOREIGN KEY(artist_id) REFERENCES artists(artist_id)
);
""")

"""artists in music database"""
artist_table_create = ("""
CREATE TABLE artists (
    artist_id varchar(255) PRIMARY KEY,
    artist_name varchar(255),
    location varchar(255),
    artist_latitude numeric(8,4),
    artist_longitude numeric(8,4)
);
""")

"""timestamps of records in songplays broken down into specific units"""
time_table_create = ("""
CREATE TABLE IF NOT EXISTS time (
    start_time timestamp PRIMARY KEY,
    hour smallint, 
    day smallint,
    week smallint,
    month smallint,
    year int,
    weekday smallint
);
""")

# STAGING TABLES

"""
Consists of log files in JSON format generated by this event simulator 
based on the songs in the song_data dataset. These simulate app activity logs from an imaginary 
music streaming app based on configuration settings. The log files in the dataset are 
partitioned by year and month.
"""
staging_events_copy = (f"""
      COPY public.staging_events
      FROM {config['S3']['LOG_DATA']}
    FORMAT AS JSON {config['S3']['LOG_JSONPATH']}
    REGION {config['S3']['REGION']}
  IAM_ROLE {config['IAM_ROLE']['ARN']};
""").format()


""""
A subset of real data from the Million Song Dataset. 
Each file is in JSON format and contains metadata about a song and the artist of that song. 
The files are partitioned by the first three letters of each song's track ID. 
"""""
staging_songs_copy = (f"""
      COPY public.staging_songs
      FROM {config['S3']['SONG_DATA']}
    FORMAT AS JSON 'auto'
    REGION {config['S3']['REGION']}
  IAM_ROLE {config['IAM_ROLE']['ARN']};
""").format()

# FINAL TABLES

songplay_table_insert = ("""
INSERT INTO public.songplays (start_time, user_id,level,song_id,artist_id,duration,sessionId,location,userAgent)
    (SELECT
                 events.start_time, 
                 events.userid, 
                 events.level, 
                 songs.song_id, 
                 songs.artist_id, 
                 songs.duration,
                 events.sessionid, 
                 events.location, 
                 events.useragent
       FROM      (SELECT TIMESTAMP 'epoch' + ts/1000 * interval '1 second' AS start_time, *
       FROM      staging_events
       WHERE     page='NextSong') events
       JOIN      staging_songs songs
       ON        events.song = songs.title
       AND       events.artist = songs.artist_name
       AND       events.length = songs.duration);
""")

user_table_insert = ("""
INSERT INTO public.users
    (SELECT distinct userid, 
            firstname, 
            lastname, 
            gender, 
            level 
       FROM public.staging_events
      WHERE userid IS NOT NULL AND staging_events.page = 'NextSong');
""")

song_table_insert = ("""
INSERT INTO public.songs
    (SELECT distinct song_id,
            artist_name,
            title, 
            year, 
            duration,
            artist_id
       FROM staging_songs
      WHERE song_id IS NOT NULL);
""")

artist_table_insert = ("""
INSERT INTO public.artists
    (SELECT distinct artist_id, 
            artist_name, 
            artist_location, 
            artist_latitude, 
            artist_longitude 
       FROM staging_songs
      WHERE artist_id IS NOT NULL);
""")

time_table_insert = ("""
INSERT INTO time (start_time, hour, day, week, month, year, weekday)
  SELECT
         start_time,
         EXTRACT(HOUR FROM start_time) as hour,
         EXTRACT(DAY FROM start_time) as day,
         EXTRACT(WEEK FROM start_time) as week,
         EXTRACT(MONTH FROM start_time) as month,
         EXTRACT(YEAR FROM start_time) as year,
         EXTRACT(DOW FROM start_time) as weekday
    FROM
        (SELECT start_time FROM songplays)
""")

# QUERY LISTS
create_table_queries = [staging_events_table_create, staging_songs_table_create, user_table_create, artist_table_create, song_table_create, time_table_create, songplay_table_create]
drop_table_queries = [staging_events_table_drop, staging_songs_table_drop, songplay_table_drop, user_table_drop, song_table_drop, artist_table_drop, time_table_drop]
copy_table_queries = [staging_events_copy, staging_songs_copy]
insert_table_queries = [user_table_insert, song_table_insert, artist_table_insert, songplay_table_insert, time_table_insert]